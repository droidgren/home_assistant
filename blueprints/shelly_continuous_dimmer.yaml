blueprint:
  name: Continuous Dimming Loop
  description: >
    Reusable script for continuous dimming (hold to brighten or dim).
    Call this from an automation (e.g. Shelly, Zigbee, or Z-Wave button hold).
  domain: script
  author: HomeAssistant Helper GPT-5

  input:
    light_entity:
      name: Target Light
      selector:
        entity:
          domain: light

    direction:
      name: Direction
      description: "1 = brighten, -1 = dim"
      default: 1
      selector:
        number:
          min: -1
          max: 1
          step: 2

    step:
      name: Brightness Step (%)
      default: 4
      selector:
        number:
          min: 1
          max: 20
          unit_of_measurement: "%"

    delay:
      name: Delay Between Steps (ms)
      default: 120
      selector:
        number:
          min: 50
          max: 1000
          unit_of_measurement: "ms"

    min_brightness:
      name: Minimum Brightness (%)
      default: 5
      selector:
        number:
          min: 1
          max: 50
          unit_of_measurement: "%"

    max_brightness:
      name: Maximum Brightness (%)
      default: 100
      selector:
        number:
          min: 50
          max: 100
          unit_of_measurement: "%"

mode: restart

sequence:
  # Preload inputs into runtime variables so Jinja can access them
  - variables:
      entity: !input light_entity
      direction: !input direction
      step: !input step
      delay_ms: !input delay
      min_brightness: !input min_brightness
      max_brightness: !input max_brightness

  - repeat:
      while: []
      sequence:
        - service: light.turn_on
          target:
            entity_id: "{{ entity }}"
          data:
            brightness_pct: >-
              {{
                [
                  [
                    ((state_attr(entity, 'brightness') | int(0)) / 2.55) | int + (step * direction),
                    max_brightness
                  ] | min,
                  min_brightness
                ] | max
              }}
        - delay:
            milliseconds: "{{ delay_ms }}"
