#  Meteorologisk årstid v 1.1
#
#  Denna yaml-fil beräknar den Meteorologiska årstiden enligt SMHIs definition baserat på temperaturen där du bor.
#  Förbättrad logik för nollställning av räknare och datumhantering.
#
#  Installation kopiera denna fil till din packages mapp och uppdatera sensorn nedan
#

#Definitioner SMHI https://www.smhi.se/vader/observationer/arstidskarta
# Vinter: <= 0.0°C, 5 dygn i följd. Ankomst = dag 1.
# Vår: > 0.0°C, 7 dygn i följd. Ankomst = dag 1. Tidigast ankomst 15 feb, senast ankomst 31 jul.
# Sommar: >= 10.0°C, 5 dygn i följd. Ankomst = dag 1.
# Höst: < 10.0°C, 5 dygn i följd. Ankomst = dag 1. Tidigast ankomst 1 aug, senast ankomst 14 feb.

# OBS! Ersätt sensor.genomsnittlig_utomhus_temp med din egen temperatursensor!
sensor:
  - platform: statistics
    name: "24 Hour Average Temperature"
    entity_id: sensor.genomsnittlig_utomhus_temp  # Ersätt med din temperatursensor 
    unique_id: meteorological_season_24_avg_temp_sensor
    state_characteristic: mean
    max_age:
      hours: 24
    precision: 1

input_datetime:
  mst_spring_arrival_date:
    name: Vårens ankomstdatum
    has_date: true
    has_time: false
  mst_summer_arrival_date:
    name: Sommarens ankomstdatum
    has_date: true
    has_time: false
  mst_autumn_arrival_date:
    name: Höstens ankomstdatum
    has_date: true
    has_time: false
  mst_winter_arrival_date:
    name: Vinterns ankomstdatum
    has_date: true
    has_time: false

input_boolean:
  mst_winter_date_set:
    name: "Vinterns datum satt"
    icon: mdi:snowflake-check
  mst_spring_date_set:
    name: "Vårens datum satt"
    icon: mdi:flower-tulip-outline
  mst_summer_date_set:
    name: "Sommarens datum satt"
    icon: mdi:sun-thermometer-outline
  mst_autumn_date_set:
    name: "Höstens datum satt"
    icon: mdi:leaf-maple

counter:
  mst_spring_days:
    name: Antal vårdygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 7 # Max 7 för vår
  mst_summer_days:
    name: Antal sommardygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 5 # Max 5 för sommar
  mst_autumn_days:
    name: Antal höstdygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 5 # Max 5 för höst
  mst_winter_days:
    name: Antal vinterdygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 5 # Max 5 för vinter

template:
  - trigger:
      - platform: state
        entity_id:
          - input_boolean.mst_winter_date_set
          - input_boolean.mst_spring_date_set
          - input_boolean.mst_summer_date_set
          - input_boolean.mst_autumn_date_set
          - counter.mst_winter_days
          - counter.mst_spring_days
          - counter.mst_summer_days
          - counter.mst_autumn_days
          - automation.meteorologisk_arstid_berakna_v1_1
    sensor:
      - name: "Meteorologisk årstid v1.1"
        unique_id: mst_meteorological_season_sensor
        # State based on which season's date is currently marked as set
        state: >
          {% if is_state('input_boolean.mst_winter_date_set', 'on') %}
            Vinter
          {% elif is_state('input_boolean.mst_spring_date_set', 'on') %}
            Vår
          {% elif is_state('input_boolean.mst_summer_date_set', 'on') %}
            Sommar
          {% elif is_state('input_boolean.mst_autumn_date_set', 'on') %}
            Höst
          {% else %}
            Ej Beräknad
          {% endif %}
        attributes:
          Ankomstdatum: >
            {% if is_state('input_boolean.mst_winter_date_set', 'on') %}
              {{ states('input_datetime.mst_winter_arrival_date') }}
            {% elif is_state('input_boolean.mst_spring_date_set', 'on') %}
              {{ states('input_datetime.mst_spring_arrival_date') }}
            {% elif is_state('input_boolean.mst_summer_date_set', 'on') %}
              {{ states('input_datetime.mst_summer_arrival_date') }}
            {% elif is_state('input_boolean.mst_autumn_date_set', 'on') %}
              {{ states('input_datetime.mst_autumn_arrival_date') }}
            {% else %}
              Ej registrerat
            {% endif %}
          Förra dygnets medeltemp: "{{ states('sensor.24_hour_average_temperature') | float(0) }}"
          Senast uppdaterad: "{{ now().strftime('%Y-%m-%d %H:%M') }}"
          # Showing counters for debugging/interest
          Vinterdygn: "{{ states('counter.mst_winter_days') }}/5"
          Vårdygn: "{{ states('counter.mst_spring_days') }}/7"
          Sommardygn: "{{ states('counter.mst_summer_days') }}/5"
          Höstdygn: "{{ states('counter.mst_autumn_days') }}/5"
          # Historical arrival dates
          Vinterns ankomstdatum: "{{ states('input_datetime.mst_winter_arrival_date') if is_state('input_boolean.mst_winter_date_set', 'on') else '' }}"
          Vårens ankomstdatum: "{{ states('input_datetime.mst_spring_arrival_date') if is_state('input_boolean.mst_spring_date_set', 'on') else '' }}"
          Sommarens ankomstdatum: "{{ states('input_datetime.mst_summer_arrival_date') if is_state('input_boolean.mst_summer_date_set', 'on') else '' }}"
          Höstens ankomstdatum: "{{ states('input_datetime.mst_autumn_arrival_date') if is_state('input_boolean.mst_autumn_date_set', 'on') else '' }}"

        icon: >
          {% if is_state('input_boolean.mst_winter_date_set', 'on') %}
            mdi:snowflake
          {% elif is_state('input_boolean.mst_spring_date_set', 'on') %}
            mdi:flower
          {% elif is_state('input_boolean.mst_summer_date_set', 'on') %}
            mdi:sunglasses
          {% elif is_state('input_boolean.mst_autumn_date_set', 'on') %}
            mdi:leaf
          {% else %}
            mdi:progress-question # Icon indicating undetermined state
          {% endif %}

automation:
  - alias: "Meteorologisk årstid Beräkna v1.1"
    id: calculate_meteorological_seasons_automation_v1_1
    trigger:
      - platform: time
        at: "00:01:00"
    action:
      - variables:
          average_temp: "{{ states('sensor.24_hour_average_temperature') | float(none) }}"
          # Check temperature availability
          temp_available: "{{ average_temp is not none }}"

      # === Step 1: Validate Temperature ===
      - if: "{{ not temp_available }}"
        then:
          - service: logbook.log
            data:
              name: Meteorologisk årstid
              message: "Temperaturdata saknas. Kan inte beräkna årstid."
              domain: automation
          - service: system_log.write
            data:
              level: warning
              message: "Meteorologisk årstid: Temperaturdata är otillgänglig, beräkning avbruten."
          - stop: "Temperaturdata otillgänglig" # Stop automation if no temp

      # === Step 2: Define Conditions Based on Today's Temp & Date ===
      - variables:
          # Temperature conditions for the day
          is_winter_temp: "{{ average_temp <= 0.0 }}"
          is_summer_temp: "{{ average_temp >= 10.0 }}"
          is_spring_potential_temp: "{{ average_temp > 0.0 }}"
          is_autumn_potential_temp: "{{ average_temp < 10.0 }}"
          

          # Date constraint checks (when can a season *progress*?)
          # Spring: Feb 15 to Jul 31
          today_is_spring_period: >-
            {% set m = now().month %}
            {% set d = now().day %}
            {{ (m == 2 and d >= 15) or (m > 2 and m <= 7) }}
          # Autumn: Aug 1 to Feb 14
          today_is_autumn_period: >-
            {% set m = now().month %}
            {% set d = now().day %}
            {{ (m >= 8) or (m == 1) or (m == 2 and d <= 14) }}
            
          is_summer_period: "{{ is_state('input_boolean.mst_summer_date_set', 'on') }}"

      # === Step 3: Update Counters (Increment or Reset Based on Conditions) ===
      # Winter Counter
      - if: "{{ is_winter_temp }}"
        then:
          - service: counter.increment
            target: { entity_id: counter.mst_winter_days }
        else:
          - service: counter.reset
            target: { entity_id: counter.mst_winter_days }
      # Summer Counter
      - if: "{{ is_summer_temp }}"
        then:
          - service: counter.increment
            target: { entity_id: counter.mst_summer_days }
        else:
          - service: counter.reset
            target: { entity_id: counter.mst_summer_days }
      # Spring Counter
      - if: "{{ is_spring_potential_temp and today_is_spring_period and not is_summer_period }}"
        then:
          - service: counter.increment
            target: { entity_id: counter.mst_spring_days }
        else:
          - service: counter.reset
            target: { entity_id: counter.mst_spring_days }
      # Autumn Counter
      - if: "{{ is_autumn_potential_temp and today_is_autumn_period }}"
        then:
          - service: counter.increment
            target: { entity_id: counter.mst_autumn_days }
        else:
          - service: counter.reset
            target: { entity_id: counter.mst_autumn_days }

      # === Step 4: Check for Season Arrival and Set Dates/Flags ===
      - variables:
          # Get current counter values
          winter_c: "{{ states('counter.mst_winter_days') | int(0) }}"
          spring_c: "{{ states('counter.mst_spring_days') | int(0) }}"
          summer_c: "{{ states('counter.mst_summer_days') | int(0) }}"
          autumn_c: "{{ states('counter.mst_autumn_days') | int(0) }}"
          # Get current stored dates for the 180-day check
          # Use a far past date if not set, to allow first setting
          winter_stored_date_str: "{{ states('input_datetime.mst_winter_arrival_date') | default('1970-01-01') }}"
          spring_stored_date_str: "{{ states('input_datetime.mst_spring_arrival_date') | default('1970-01-01') }}"
          summer_stored_date_str: "{{ states('input_datetime.mst_summer_arrival_date') | default('1970-01-01') }}"
          autumn_stored_date_str: "{{ states('input_datetime.mst_autumn_arrival_date') | default('1970-01-01') }}"
          # Date 180 days ago for comparison
          six_months_ago_ts: "{{ (now() - timedelta(days=180)).timestamp() }}"

      - choose:
          # --- Winter Arrival Check ---
          - conditions: "{{ winter_c >= 5 }}"
            sequence:
              - variables:
                  winter_arrival_dt_str: "{{ (now() - timedelta(days=5)) | as_timestamp | timestamp_custom('%Y-%m-%d') }}"
                  # Check if date needs setting (boolean off OR stored date is old)
                  set_winter_date: >-
                    {{ is_state('input_boolean.mst_winter_date_set', 'off') or
                       (strptime(winter_stored_date_str, '%Y-%m-%d', default=now()).timestamp() < six_months_ago_ts) }}
              - if: "{{ set_winter_date }}"
                then:
                  - service: input_datetime.set_datetime
                    target: { entity_id: input_datetime.mst_winter_arrival_date }
                    data: { date: "{{ winter_arrival_dt_str }}" }
                  - service: input_boolean.turn_on
                    target: { entity_id: input_boolean.mst_winter_date_set }
                  # Turn off other season flags
                  - service: input_boolean.turn_off
                    target:
                      entity_id:
                        - input_boolean.mst_spring_date_set
                        - input_boolean.mst_summer_date_set
                        - input_boolean.mst_autumn_date_set
                        
          # --- Autumn Arrival Check ---
          - conditions: "{{ autumn_c >= 5 }}"
            sequence:
              - variables:
                  # Calculate potential arrival date object
                  autumn_arrival_dt_obj: "{{ (now() - timedelta(days=5)) }}"
                  autumn_arrival_dt_str: "{{ autumn_arrival_dt_obj | as_timestamp | timestamp_custom('%Y-%m-%d') }}"
                  # Check latest arrival date (must be >= Aug 1 OR <= Feb 14)
                  latest_autumn_ok: >-
                    {% set arr_m = (autumn_arrival_dt_obj | as_datetime).month %}
                    {% set arr_d = (autumn_arrival_dt_obj | as_datetime).day %}
                    {{ (arr_m >= 8) or (arr_m == 1) or (arr_m == 2 and arr_d <= 14) }}
                  # Check if date needs setting
                  set_autumn_date: >-
                    {{ is_state('input_boolean.mst_autumn_date_set', 'off') or
                       (strptime(autumn_stored_date_str, '%Y-%m-%d', default=now()).timestamp() < six_months_ago_ts) }}
              - if: "{{ set_autumn_date and latest_autumn_ok }}"
                then:
                  - service: input_datetime.set_datetime
                    target: { entity_id: input_datetime.mst_autumn_arrival_date }
                    data: { date: "{{ autumn_arrival_dt_str }}" }
                  - service: input_boolean.turn_on
                    target: { entity_id: input_boolean.mst_autumn_date_set }
                  # Turn off other season flags
                  - service: input_boolean.turn_off
                    target:
                      entity_id:
                        - input_boolean.mst_winter_date_set
                        - input_boolean.mst_spring_date_set
                        - input_boolean.mst_summer_date_set        
                        
          # --- Summer Arrival Check ---
          - conditions: "{{ summer_c >= 5 }}"
            sequence:
              - variables:
                  summer_arrival_dt_str: "{{ (now() - timedelta(days=5)) | as_timestamp | timestamp_custom('%Y-%m-%d') }}"
                  # Check if date needs setting
                  set_summer_date: >-
                    {{ is_state('input_boolean.mst_summer_date_set', 'off') or
                       (strptime(summer_stored_date_str, '%Y-%m-%d', default=now()).timestamp() < six_months_ago_ts) }}
              - if: "{{ set_summer_date }}"
                then:
                  - service: input_datetime.set_datetime
                    target: { entity_id: input_datetime.mst_summer_arrival_date }
                    data: { date: "{{ summer_arrival_dt_str }}" }
                  - service: input_boolean.turn_on
                    target: { entity_id: input_boolean.mst_summer_date_set }
                  # Turn off other season flags
                  - service: input_boolean.turn_off
                    target:
                      entity_id:
                        - input_boolean.mst_winter_date_set
                        - input_boolean.mst_spring_date_set
                        - input_boolean.mst_autumn_date_set
                        
          # --- Spring Arrival Check ---
          - conditions: "{{ spring_c >= 7 }}"
            sequence:
              - variables:
                  # Calculate potential arrival date object (needed for month/day checks)
                  spring_arrival_dt_obj: "{{ (now() - timedelta(days=7)) }}"
                  spring_arrival_dt_str: "{{ (spring_arrival_dt_obj | as_datetime).strftime('%Y-%m-%d') }}"
                  # Check latest arrival date (must be <= July 31)
                  latest_spring_ok: "{{ ((spring_arrival_dt_obj | as_datetime).month * 100 + (spring_arrival_dt_obj | as_datetime).day) <= 731 }}"
                  # Check if date needs setting
                  set_spring_date: >-
                    {{ is_state('input_boolean.mst_spring_date_set', 'off') or
                       (strptime(spring_stored_date_str, '%Y-%m-%d', default=now()).timestamp() < six_months_ago_ts) }}
              - if: "{{ set_spring_date and latest_spring_ok }}"
                then:
                  - service: input_datetime.set_datetime
                    target: { entity_id: input_datetime.mst_spring_arrival_date }
                    data: { date: "{{ spring_arrival_dt_str }}" }
                  - service: input_boolean.turn_on
                    target: { entity_id: input_boolean.mst_spring_date_set }
                  # Turn off other season flags
                  - service: input_boolean.turn_off
                    target:
                      entity_id:
                        - input_boolean.mst_winter_date_set
                        - input_boolean.mst_summer_date_set
                        - input_boolean.mst_autumn_date_set

    mode: single # Ensure only one instance runs at a time
