#  Meterologisk årstid v 1.0 
#  
#  Denna yaml-fil beräknar den Meterologiska årstiden enligt SMHIs defintion (nedan) baserat på temperaturen där du bor.
#  
#  Installation kopiera denna fil till din packages mapp och uppdatera sensorn nedan
#  

#Defintioner SMHI https://www.smhi.se/vader/observationer/arstidskarta
#Nuvarande årstid https://www.smhi.se/vader/observationer/ankomstkarta/

sensor:
  - platform: statistics
    name: "24 Hour Average Temperature"
    entity_id: sensor.genomsnittlig_utomhus_temp  # Ersätt med din temperatursensor 
    unique_id: meteorological_season_24_avg_temp_sensor
    state_characteristic: mean
    max_age:
      hours: 24
    precision: 1

input_datetime:
  spring_arrival_date:
    name: Vårens ankomstdatum
    has_date: true
    has_time: false

  summer_arrival_date:
    name: Sommarens ankomstdatum
    has_date: true
    has_time: false

  autumn_arrival_date:
    name: Höstens ankomstdatum
    has_date: true
    has_time: false

  winter_arrival_date:
    name: Vinterns ankomstdatum
    has_date: true
    has_time: false

input_boolean:
  winter_date_set:
    name: "Vinterns datum satt"
  spring_date_set:
    name: "Vårens datum satt"
  summer_date_set:
    name: "Sommarens datum satt"
  autumn_date_set:
    name: "Höstens datum satt"
counter:
  spring_days:
    name: Antal vårdygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 7
  summer_days:
    name: Antal sommardygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 5
  autumn_days:
    name: Antal höstdygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 5
  winter_days:
    name: Antal vinterdygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 5

template:
  - trigger:
      - platform: state
        entity_id:
          - counter.spring_days
          - counter.summer_days
          - counter.autumn_days
          - counter.winter_days
          - automation.meteorologisk_arstid_berakna
    sensor:
      - name: "Meteorologisk årstid"
        unique_id: meteorological_season_sensor
        state: >
          {% if states('counter.spring_days') | int(0) >= 7 %}
            Vår
          {% elif states('counter.summer_days') | int(0) >= 5 %}
            Sommar
          {% elif states('counter.autumn_days') | int(0) >= 5 %}
            Höst
          {% elif states('counter.winter_days') | int(0) >= 5 %}
            Vinter
          {% else %}
            Ej beräknad
          {% endif %}
        attributes:
          Ankomstdatum: >
            {% if this.state == 'Vår' and is_state('input_boolean.spring_date_set', 'on') %}
              {{ states('input_datetime.spring_arrival_date') }}
            {% elif this.state == 'Sommar' and is_state('input_boolean.summer_date_set', 'on') %}
              {{ states('input_datetime.summer_arrival_date') }}
            {% elif this.state == 'Höst' and is_state('input_boolean.autumn_date_set', 'on') %}
              {{ states('input_datetime.autumn_arrival_date') }}
            {% elif this.state == 'Vinter' and is_state('input_boolean.winter_date_set', 'on') %}
              {{ states('input_datetime.winter_arrival_date') }}
            {% else %}
              Ej registrerat
            {% endif %}    
          Förra dygnets medeltemp: "{{ states('sensor.24_hour_average_temperature') | float(0) }}"
          Senast uppdaterad: "{{ now().strftime('%Y-%m-%d %H:%M') }}"    
          Historik: "__________________"
          Vinterns ankomstdatum: "{{ states('input_datetime.winter_arrival_date') if (this.state != 'Vinter' and is_state('input_boolean.winter_date_set', 'on')) else '' }}"
          Vårens ankomstdatum: "{{ states('input_datetime.spring_arrival_date') if (this.state != 'Vår' and is_state('input_boolean.spring_date_set', 'on')) else '' }}"
          Sommarens ankomstdatum: "{{ states('input_datetime.summer_arrival_date') if (this.state != 'Sommar' and is_state('input_boolean.summer_date_set', 'on')) else '' }}"
          Höstens ankomstdatum: "{{ states('input_datetime.autumn_arrival_date') if (this.state != 'Höst' and is_state('input_boolean.autumn_date_set', 'on')) else '' }}"

        icon: >
          {% if this.state == 'Vår' %}
            mdi:flower
          {% elif this.state == 'Sommar' %}
            mdi:sunglasses
          {% elif this.state == 'Höst' %}
            mdi:leaf
          {% elif this.state == 'Vinter' %}
            mdi:snowflake
          {% else %}
            mdi:weather-partly-cloudy
          {% endif %}  
          
automation:
  - alias: "Meteorologisk årstid Beräkna"
    id: calculate_meteorological_seasons_automation
    trigger:
      - platform: time
        at: "00:01:00"

    action:
      - variables:
          average_temp: "{{ states('sensor.24_hour_average_temperature') | float(none) }}"
          six_months_ago: "{{ (now() - timedelta(days=180)).strftime('%Y-%m-%d') }}"

      - choose:
          - conditions: "{{ average_temp is none }}"
            sequence:
              - service: logbook.log
                data:
                  name: Meteorologisk årstid
                  message: "Temperaturdata saknas. Kan inte beräkna årstid."
                  domain: sensor
              - service: system_log.write
                data:
                  level: warning
                  message: "Meteorologisk årstid: Temperaturdata är otillgänglig, beräkning avbruten."
              - stop: "Temperaturdata otillgänglig, avbryter automationen"

      - variables:
          spring_date_ok: "{{ (now().month == 2 and now().day >= 15) or (now().month > 2 and now().month <= 7) }}"
          autumn_date_ok: "{{ (now().month >= 8) or (now().month == 2 and now().day <= 14) }}"

      - choose:
          # **Vinter **
          - conditions: "{{ average_temp <= 0.0 }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.winter_days
              - condition: "{{ states('sensor.meteorologisk_arstid')  == 'Vinter' }}"  # Återställ övriga räknare endast om vinter nåtts
              - service: counter.reset
                target:
                  entity_id:
                    - counter.spring_days
                    - counter.summer_days
                    - counter.autumn_days
              - condition: template  #Uppdatera arrival_date om det tidigare inte finns ett datum eller om om det har gått 6 månader
                value_template: >-
                  {% set stored_date = states('input_datetime.winter_arrival_date') %}
                  {{ is_state('input_boolean.winter_date_set', 'off') or stored_date < six_months_ago }}
              - service: input_datetime.set_datetime
                target:
                  entity_id: input_datetime.winter_arrival_date
                data:
                  date: "{{ (now() - timedelta(days = 5)).strftime('%Y-%m-%d') }}"
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.winter_date_set

          # **Sommar**
          - conditions: "{{ average_temp >= 10.0 }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.summer_days
              - condition: "{{ states('sensor.meteorologisk_arstid') == 'Sommar' }}"  # Återställ övriga räknare endast om sommar nåtts
              - service: counter.reset
                target:
                  entity_id:
                    - counter.spring_days
                    - counter.winter_days
                    - counter.autumn_days
              - condition: template  
                value_template: >-
                  {% set stored_date = states('input_datetime.summer_arrival_date') %}
                  {{ is_state('input_boolean.summer_date_set', 'off') or stored_date < six_months_ago }}
              - service: input_datetime.set_datetime
                target:
                  entity_id: input_datetime.summer_arrival_date
                data:
                  date: "{{ (now() - timedelta(days = 5)).strftime('%Y-%m-%d') }}"
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.summer_date_set

          #  **Vår **
          - conditions: "{{ spring_date_ok and average_temp > 0.0 }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.spring_days
              - condition: "{{ states('sensor.meteorologisk_arstid') == 'Vår' }}"  # Återställ övriga räknare endast om vår nåtts
              - service: counter.reset
                target:
                  entity_id:
                    - counter.summer_days
                    - counter.winter_days
                    - counter.autumn_days
              - condition: template
                value_template: >-
                  {% set stored_date = states('input_datetime.spring_arrival_date') %}
                  {{ is_state('input_boolean.spring_date_set', 'off') or stored_date < six_months_ago }}
              - service: input_datetime.set_datetime
                target:
                  entity_id: input_datetime.spring_arrival_date
                data:
                  date: "{{ (now() - timedelta(days = 7)).strftime('%Y-%m-%d') }}"
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.spring_date_set

          #  **Höst **
          - conditions: "{{ autumn_date_ok and average_temp < 10.0 }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.autumn_days
              - condition: "{{ states('sensor.meteorologisk_arstid') == 'Höst' }}"  # Återställ övriga räknare endast om höst nåtts
              - service: counter.reset
                target:
                  entity_id:
                    - counter.spring_days
                    - counter.summer_days
                    - counter.winter_days
              - condition: template
                value_template: >-
                  {% set stored_date = states('input_datetime.autumn_arrival_date') %}
                  {{ is_state('input_boolean.autumn_date_set', 'off') or stored_date < six_months_ago }}
              - service: input_datetime.set_datetime
                target:
                  entity_id: input_datetime.autumn_arrival_date
                data:
                  date: "{{ (now() - timedelta(days = 5)).strftime('%Y-%m-%d') }}"
              - service: input_boolean.turn_on
                target:
                  entity_id: input_boolean.autumn_date_set

    mode: single
