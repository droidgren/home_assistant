###  WARNING THIS IS UNTESTED AND BROKEN ###
#
#  Hur man använder:  
#
#Meterologiska årstider
#Defintioner https://www.smhi.se/vader/observationer/arstidskarta

#Vintern anländer om det råder vintertemperatur fem dygn i följd. 
#Vintertemperatur är det då dygnsmedeltemperaturen är 0,0°C eller lägre, men ännu inte fem dygn i följd. 
#Vinterns ankomstdatum avser det första dygnet av fem med vintertemperaturer.

#Våren anländer om det råder vårtemperatur sju dygn i följd. 
#Vårtemperatur är det då dygnsmedeltemperaturen är över 0,0°C, men ännu inte sju dygn i följd. Vårens ankomstdatum avser det första dygnet av sju med vårtemperaturer. 
#Den 15 februari har satts som det tidigaste tillåtna datumet för vårens ankomst. 
#Senast möjliga datum för vårens ankomst är den 31 juli.

#Sommaren anländer om det råder sommartemperatur fem dygn i följd. 
#Sommartemperatur är det då dygnsmedeltemperaturen är 10,0°C eller högre, men ännu inte fem dygn i följd. 
#Sommarens ankomstdatum avser det första dygnet av fem med sommartemperaturer.


#Hösten anländer om det råder hösttemperatur fem dygn i följd. 
#Hösttemperatur är det då dygnsmedeltemperaturen är under 10,0°C, men ännu inte fem dygn i följd. Höstens ankomstdatum avser det första dygnet av fem med hösttemperaturer. 
#Den 1 augusti har satts som det tidigaste tillåtna datumet för höstens ankomst. 
#Senast möjliga datum för höstens ankomst är den 14 februari.

sensor:
  - platform: statistics
    name: "24 Hour Average Temperature"
    entity_id: sensor.genomsnittlig_utomhus_temp  # Byt ut mot DIN temperatursensor
    unique_id: meteorological_season_24_avg_temp_sensor
    state_characteristic: mean
    max_age:
      hours: 24
    precision: 1

counter:
  spring_days:
    name: Antal vårdygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 7
  summer_days:
    name: Antal sommardygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 5
  autumn_days:
    name: Antal höstdygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 5
  winter_days:
    name: Antal vinterdygn i följd
    initial: 0
    step: 1
    minimum: 0
    maximum: 5

template:
  - sensor:
      - name: "Meteorologisk årstid"
        unique_id: meteorological_season_sensor
        state: >
          {% if states('counter.spring_days') | int(0) >= 7 %}
            Vår
          {% elif states('counter.summer_days') | int(0) >= 5 %}
            Sommar
          {% elif states('counter.autumn_days') | int(0) >= 5 %}
            Höst
          {% elif states('counter.winter_days') | int(0) >= 5 %}
            Vinter
          {% else %}
            Ej beräknad
          {% endif %}
        icon: >
          {% if this.state == 'Vår' %}
            mdi:flower
          {% elif this.state == 'Sommar' %}
            mdi:sunglasses
          {% elif this.state == 'Höst' %}
            mdi:leaf
          {% elif this.state == 'Vinter' %}
            mdi:snowflake
          {% else %}
            mdi:weather-partly-cloudy
          {% endif %}
        attributes:
          arrival_date: >
            {% if this.state == 'Vår' %}
              {{ (now() - timedelta(days = states('counter.spring_days') | int(0) - 1)).strftime('%Y-%m-%d') }}
            {% elif this.state == 'Sommar' %}
              {{ (now() - timedelta(days = states('counter.summer_days') | int(0) - 1)).strftime('%Y-%m-%d') }}
            {% elif this.state == 'Höst' %}
              {{ (now() - timedelta(days = states('counter.autumn_days') | int(0) - 1)).strftime('%Y-%m-%d') }}
            {% elif this.state == 'Vinter' %}
              {{ (now() - timedelta(days = states('counter.winter_days') | int(0) - 1)).strftime('%Y-%m-%d') }}
            {% else %}
              Unknown
            {% endif %}

automation:
  - alias: "Meteorologisk årstid Beräkna"
    id: calculate_meteorological_seasons_automation
    trigger:
      - platform: time
        at: "00:01:00"  # Kör strax efter midnatt.
    action:
      - variables:
          average_temp: "{{ states('sensor.24_hour_average_temperature') | float(none) }}"
          
      - choose:
          - conditions: "{{ average_temp is none }}"          # Om temperaturdata saknas, logga och avbryt
            sequence:
              - service: logbook.log
                data:
                  name: Meteorologisk årstid
                  message: "Temperaturdata saknas. Kan inte beräkna årstid."
                  domain: sensor
              - service: system_log.write
                data:
                  level: warning
                  message: "Meteorologisk årstid: Temperaturdata är otillgänglig, beräkning avbruten."
              - stop: "Temperaturdata otillgänglig, avbryter automationen"

      - variables:  # Definiera variabler för temperatur och datumvillkor
          is_spring_temp: "{{ average_temp > 0.0 and average_temp < 10.0 }}"
          is_summer_temp: "{{ average_temp >= 10.0 }}"
          is_autumn_temp: "{{ average_temp < 10.0 and average_temp > 0.0 }}"
          is_winter_temp: "{{ average_temp <= 0.0 }}"
          spring_date_ok: "{{ (now().month == 2 and now().day >= 15) or (now().month > 2 and now().month <= 7) }}" #Datum ligger mellan den 15 februari och slutet av juli. 
          autumn_date_ok: "{{ (now().month >= 8) or (now().month == 2 and now().day <= 14) }}" #Datum ligger mellan augusti och den 14 februari. 



      - choose:
          # Vår
          - conditions: "{{ spring_date_ok and is_spring_temp }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.spring_days
          - conditions: "{{ not (spring_date_ok and is_spring_temp) }}"  # Nollställ om inte datumintervall och vårtemperatur
            sequence:
              - service: counter.reset
                target:
                  entity_id: counter.spring_days

          # Sommar
          - conditions: "{{ is_summer_temp }}"  
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.summer_days
          - conditions: "{{ not is_summer_temp }}"  # Nollställ om inte sommartemperatur
            sequence:
              - service: counter.reset
                target:
                  entity_id: counter.summer_days

          # Höst
          - conditions: "{{ autumn_date_ok and is_autumn_temp }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.autumn_days
          - conditions:  "{{ not (autumn_date_ok and is_autumn_temp) }}"  # Nollställ om inte datumintervall och höstemperatur
            sequence:
              - service: counter.reset
                target:
                  entity_id: counter.autumn_days

          # Vinter
          - conditions: "{{ is_winter_temp }}"
            sequence:
              - service: counter.increment
                target:
                  entity_id: counter.winter_days
          - conditions: "{{ not is_winter_temp }}"  # Nollställ om inte vintertemperatur
            sequence:
              - service: counter.reset
                target:
                  entity_id: counter.winter_days
    mode: single
