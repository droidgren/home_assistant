#PriceLevel
#Price level based on trailing price average (3 days for hourly values and 30 days for daily values)
# NORMAL: The price is greater than 90 % and smaller than 115 % compared to average price.
# CHEAP: The price is greater than 60 % and smaller or equal to 90 % compared to average price.
# VERY_CHEAP: The price is smaller or equal to 60 % compared to average price.
# EXPENSIVE: The price is greater or equal to 115 % and smaller than 140 % compared to average price.
# VERY_EXPENSIVE: The price is greater or equal to 140 % compared to average price.

# This creates two sensors (sensor.tibber_electricity_price and sensor.electricity_price ). 
# The first contains the RAW-data from tibber API
# The second contains all data from the first plus prices levels, as well as some addtional attributes like max, min, and avarage. 
# I suggest to use the last one (sensor.electricity_price) in your automations, etc. 
# As default it returns the quaterly prices but also include the average hour price as a separate attribute called totalHour.

sensor:
  - name: Tibber Electricity Price
    unique_id: 0803a6e8-bd6f-4164-9627-4c168f805ce6
    platform: rest
    resource: https://api.tibber.com/v1-beta/gql
    method: POST
    scan_interval: 180
    payload: '{ "query": "{ viewer { homes { currentSubscription { priceInfo(resolution: QUARTER_HOURLY) { current { total currency level energy tax } today { total startsAt level energy tax } tomorrow { total startsAt level energy tax }}}}}}" }'
    json_attributes_path: "$.data.viewer.homes[0].currentSubscription.priceInfo"
    json_attributes:
      - current
      - today
      - tomorrow
    value_template: "{{ value_json is defined }}"
    headers:
      Authorization: !secret tibber_api_token
      Content-Type: application/json
      User-Agent: REST

template:
  - sensor:
      - name: Electricity price
        unique_id: d4c04abf-c258-4f0f-a61d-cc0170225081
        unit_of_measurement: "SEK/kWh"
        icon: mdi:currency-usd
        device_class: monetary
        availability: "{{ state_attr('sensor.tibber_electricity_price', 'today') | default('unknown') not in ['unknown','unavailable', None] }}"
        state: "{{ this.attributes.current.total | float(0) if this.attributes is defined and this.attributes.current is defined and this.attributes.current.total is defined and is_number(this.attributes.current.total) else None }}"
        attributes:
          all_prices: >-
            {% set prices = state_attr('sensor.tibber_electricity_price', 'today') | default([]) +
                             state_attr('sensor.tibber_electricity_price', 'tomorrow') | default([]) %}
            {% set grouped = namespace(result=[]) %}
            {% for p in prices %}
              {% set st = as_datetime(p.startsAt) %}
              {% set curhour = st.replace(minute=0, second=0, microsecond=0) %}
              {% set nexthour = curhour + timedelta(hours=1) %}
              {% set hour_prices = prices
                  | selectattr('startsAt', '>=', curhour.isoformat())
                  | selectattr('startsAt', '<', nexthour.isoformat())
                  | map(attribute='total') | list %}
              {% set avg_hour = (hour_prices | average(0)) if hour_prices | count > 0 else None %}
              {% if avg_hour is not none %}
                {% set avg_hour = avg_hour | round(4) %}
              {% endif %}
              {% set new = dict(p, **{'totalHour': avg_hour}) %}
              {% set grouped.result = grouped.result + [new] %}
            {% endfor %}
            {{ grouped.result }}
          min_price: "{{ this.attributes.all_prices | map(attribute='total') | list | min if this.attributes.all_prices is defined and this.attributes.all_prices | count > 0 else None }}"
          max_price: "{{ this.attributes.all_prices | map(attribute='total') | list | max if this.attributes.all_prices is defined and this.attributes.all_prices | count > 0 else None }}"
          avg_price: "{{ this.attributes.all_prices | map(attribute='total') | list | average(0) if this.attributes.all_prices is defined and this.attributes.all_prices | count > 1 else this.attributes.max_price | default(None) }}"
          future: "{{ (this.attributes.all_prices | default([])) | selectattr('startsAt', 'gt', (now() + timedelta(minutes=-15)).isoformat()) | list if this.attributes.all_prices is defined else [] }}"
          future_min_price: "{{ this.attributes.future | map(attribute='total') | list | min if this.attributes.future is defined and this.attributes.future | count > 0 else None }}"
          future_max_price: "{{ this.attributes.future | map(attribute='total') | list | max if this.attributes.future is defined and this.attributes.future | count > 0 else None }}"
          future_avg_price: "{{ this.attributes.future | map(attribute='total') | list | average(0) if this.attributes.future is defined and this.attributes.future | count > 1 else this.attributes.future_max_price | default(None) }}"
          current: "{{ this.attributes.future | first if this.attributes.future | count > 0 else None }}"
          price_level: "{{ this.attributes.current.level | default('unknown') | replace('_', ' ') | capitalize if this.attributes.current is defined and this.attributes.current.level is defined else None }}"
          price_level_1d: >-
            {% set price_cur = this.state | default(0) | float(0) %}
            {% set price_avg = this.attributes.avg_price | default(0) | float(0) %}
            {% if price_cur == 0 or price_avg == 0 %}
              unknown
            {% else %}
              {% set price_ratio = (price_cur / price_avg) %}
              {% if price_ratio >= 1.4 %}
                Very expensive
              {% elif price_ratio >= 1.15 %}
                Expensive
              {% elif price_ratio <= 0.6 %}
                Very cheap
              {% elif price_ratio <= 0.9 %}
                Cheap
              {% else %}
                Normal
              {% endif %}
            {% endif %}
          price_level_combined: >-
            {% set level1 = this.attributes.price_level_1d | default('unknown') %}
            {% set level3 = this.attributes.price_level | default('unknown') %}
            {% if level1 == level3 %}
              {{ level1 }}
            {% elif level1 in ['unknown','unavailable','none'] or level3 in ['unknown','unavailable','none'] %}
              unknown
            {% elif level1 == "Very cheap" %}
              {{ level3 }}
            {% elif level3 == "Very cheap" %}
              {{ level1 }}
            {% elif level1 == "Cheap" %}
              {{ level3 }}
            {% elif level3 == "Cheap" %}
              {{ level1 }}
            {% elif level1 == "Normal" %}
              {{ level3 }}
            {% elif level3 == "Normal" %}
              {{ level1 }}
            {% elif level1 == "Expensive" %}
              {{ level3 }}
            {% else %}
              {{ level1 }}
            {% endif %}
          is_below_average: "{{ (this.state | float(0) < this.attributes.avg_price | float(0)) if is_number(this.state) and is_number(this.attributes.avg_price) else None }}"
          is_above_average: "{{ (this.state | float(0) > this.attributes.avg_price | float(0)) if is_number(this.state) and is_number(this.attributes.avg_price) else None }}"
          is_at_min: "{{ (this.state | float(0) <= this.attributes.min_price | float(0)) if is_number(this.state) and is_number(this.attributes.min_price) else None }}"
          is_at_max: "{{ (this.state | float(0) >= this.attributes.max_price | float(0)) if is_number(this.state) and is_number(this.attributes.max_price) else None }}"
          is_close_to_min: "{{ (this.state | float(0) <= (1.15 * this.attributes.min_price | float(0))) if is_number(this.state) and is_number(this.attributes.min_price) else None }}"
          future_price_level: >-
            {% set price_cur = this.state | default(0) | float(0) %}
            {% set price_avg = this.attributes.future_avg_price | default(0) | float(0) %}
            {% if price_cur == 0 or price_avg == 0 %}
              unknown
            {% else %}
              {% set price_ratio = (price_cur / price_avg) %}
              {% if price_ratio >= 1.4 %}
                Very expensive
              {% elif price_ratio >= 1.15 %}
                Expensive
              {% elif price_ratio <= 0.6 %}
                Very cheap
              {% elif price_ratio <= 0.9 %}
                Cheap
              {% else %}
                Normal
              {% endif %}
            {% endif %}
          next_16h: "{{ (this.attributes.future | default([])) | selectattr('startsAt', 'lt', (now() + timedelta(hours=16)).isoformat()) | list if this.attributes.future is defined else [] }}"
          next_16h_min_price: "{{ this.attributes.next_16h | map(attribute='total') | list | min if this.attributes.next_16h is defined and this.attributes.next_16h | count > 0 else None }}"
          next_16h_is_at_min: "{{ (this.state | float(0) <= this.attributes.next_16h_min_price | float(0)) if is_number(this.state) and is_number(this.attributes.next_16h_min_price) else None }}"
